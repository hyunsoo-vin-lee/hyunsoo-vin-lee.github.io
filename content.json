{"pages":[],"posts":[{"title":"about Stock 프로젝트 계획","text":"목표주식 추천 종목 추출 동기월급을 모아서는 서울에 집 한 채도 가지기 힘든 요즘. YOLO 스타일을 추구하는 우리 부부에게 노후 대책은 이제 주식 뿐이야! 올바른 주식 투자를 위해서는 퀀트투자가 답! 퀀트투자를 하기 위해서 재무제표 기반으로 건설적인 투자 계획을 세우자! 세부 목표재무제표 정보를 기반으로 하여 원하는 지표에 맞는 종목을 추천해줄 것 요구 사항 항목 우선순위 Remark 재무제표 crawling 1 재무제표 view 3 기업정보 crawling 2 기업정보 view 4 custom 지표 적용 9 추천종목 추출 5 excel export 8 snapshot 6 snapshot 대상에 대한 매월 auto snapshot 7 DART의 재무제표 export file에 대한 parsing 기능 10 필요 기술 언어 : python web framework : Django DB : maria DB, MySQL 화면 : Vue.js crawling을 위한 scheduler : apscheduler grid : toast-UI 일정 수립 Task Desc PlanStart PlanEnd ActualStart ActualEnd Remark 화면 설계 요구사항을 수행할 수 있는 화면 설계 11/15 11/15 https://ovenapp.io/ DB 설계 요구사항의 내용으로 Data Modeling 11/18 11/18 http://aquerytool.com/ 환경설정 구현하기 위한 기본 환경 설정 11/19 11/21 환경 설정 문서를 slideshare로 남길 것 구현 화면을 실제 사용할 수 있도록 구현 11/25 12/6 항목별로 일정 다시 설계","link":"/2019/11/15/about-Stock-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B3%84%ED%9A%8D/"},{"title":"Excel Export","text":"문제/현상excel로 export를 할 때 로컬이나 QA 환경에서는 정상적으로 excel 다운로드가 이루어지나, 운영 환경에서는 Canonical Path를 사용하라는 메세지를 남기면서 에러가 뜬다. 원인처음에는 excel 파일을 만들기 위해서, workbook을 생성하고 worksheet에 내용을 다 쓰게 되면 이를 FileOutputStream을 이용해서 실제 file에 쓰게 되고 이를 서버내의 임의의 경로에 떨군 다음 사용자에게 밀어주는 형태로 구성했다. 그러나 문제가 되는 부분은 실제 file을 new File(filePath); 한 부분인데 이 때 filePath를 설정 파일 내에서 가져와서 그 뒤에 file명만 붙여서 절대 path처럼 사용한 것임에도 불구하고 Canonical Path를 쓰지 않아서 error가 난다고 하니 통 이해할 수 없었다. 관련하여 구글링을 해보니, Absolute Path와 Canonical Path의 차이점( https://www.benjaminlog.com/entry/absolute-path-vs-canonical-path ) 이라는 게시물이 있었다. 간단히 요약하자면 Abolute Path는 path의 expression안에 ../ 이나 ./ 같은 문자열도 사용이 가능하고 Canonical Path는 그런 표현을 허락하지 않는다는 것이다. 예를 들어, Path : /users/hslee 라는 주소가 있다면, Absolute Path : /users/../users/hslee도 가능하고, /users/./././hslee 도 가능하다. Canonical Path : /users/hslee 단 하나만 가능하다. 그러나 실제로 나온 path는 ../이나 ./이 없는 상태였기에 위의 방법으로는 해결하지 못했다. 조치file의 path부분에서 계속 에러가 발생하니 file을 생성하고 사용자에게 push하지 않고 애초에 output Stream을 사용해서 excel을 작성하니 HttpOutputServletResponse로 그대로 밀어버리면 될 듯했다. 마침 기존 grid 화면에서 grid api를 사용하여 excel export를 그런 식으로 구현하고 있어 조금 차용하였다. 12345678910111213141516// beforeHSSFWorkbook wb = new HSSFWorkbook();...String filePath = System.getProperty() + java.io.FileSeparator + \"data.xls\";FileOutputStream fos = new File(filePath);wb.write(fos);// afterHSSFWorkbook wb = new HSSFWorkbook();...ServletOutputStream sos = response.getOutputStream();wb.write(sos); 결과다행히도 문제 없이 정상적으로 다운로드를 할 수 있었다. 기존 enovia 환경이었다면 request, response 대신 context만 넘어오길 때문에 이와 같은 방법을 쓰기에는(java 단에서) 어려웠을 것이다. 장점 file path를 구하는 것보다 소스 구현이 편하다. file로 생성하면 나중에 삭제 로직도 구현해야 하지만 stream을 사용하면 그럴 필요가 없다. 단점 response가 필요하므로 controller단부터 response를 계속 parameter로 넘겨줘야 한다. 연계해서 공부할 것 file을 사용자에게 제공하는 방법에 무엇이 더 있는지 알아보자.","link":"/2019/11/18/Excel-Export/"},{"title":"ORA-22835","text":"문제/현상ORA-22835: 버퍼가 너무 작아 CLOB를 CHAR 또는 BLOB에서 RAW로 변환할 수 없습니다. 데이터 조회하는 화면인데 로컬과 QA에서는 정상적으로 수행되던 것이 운영에서는 위와 같은 에러가 발생했다. 원인123SELECT PRJ.* FROM TB_PROJECT PRJ WHERE TO_CHAR(PRJ.PROJECT_STR) = ${projectName}; 굉장히 구문을 간략하게 적어보았는데(-_-;;) 사실 저게 전부다. TB_PROJECT라는 TABLE의 PROJECT_STR이라는 컬럼은 CLOB 형식이다. projectName이라는 변수를 java단에서 넘겨 받아 SQL문을 만들고 이를 실행하는 과정에서 위의 에러가 발생한 것이다. 왜 로컬과 QA에서 문제가 발생하지 않았냐면, CLOB을 TO_CHAR 한다고 무조건 발생하는 것이 아니라 4000 Byte를 넘는 문자열이 TO_CHAR의 대상이 되었을 때만 발생하기 때문이었다. 즉, 로컬과 QA DB에는 해당 컬럼에 4000 Byte가 넘는 데이터가 존재하지 않았기 때문에 운이 좋게도 발생하지 않았던 것이고, 운영에서는 그런 데이터가 존재하기 때문에 대번에 에러가 발생한 것이다. 어찌 보면 이제라도 발생해서 고칠 수 있기에 더 다행이라고 할 수 있다. 조치해결방법은 간단하다. CLOB 컬럼의 값에는 TO_CHAR를 사용하지 않으면 된다. 구글링을 해보면 대처방법으로 DBMS_LOG.SUBSTR 을 사용하여 4000 Byte를 잘라서 사용하는 방법도 추천하는데 나의 지금 케이스에는 적합하지 않아 그 방법은 pass. 대신 PROJECT_STR을 다른 테이블과 join하는 방식으로 하여 CLOB 컬럼의 값을 where 조건에서 사용하지 않도록 변경하였다. 결과다행이도 정상적으로 동작하였다. 앞으로는 where문을 구성할 때 대상이 되는 컬럼들의 type을 파악하여 CLOB이나 BLOB인 경우 조건을 다른 것으로 대체할 수 있는지 먼저 파악을 하고 작업해야겠다. 정 써야 한다면 DBMS_LOG.SUBSTR을 쓰는 것을 고려해야 할 것이다. 연계해서 공부할 것 DB, Oracle의 컬럼 type을 공부해보자.","link":"/2019/11/19/ORA-22835/"},{"title":"about Stock - 기능 명세서","text":"기능 명세서는 요구사항을 조금 더 상세하게 구분지어서 나중에 테스트 케이스와 매핑을 하기 위해서 작성하고자 한다. 각 기능에 대해서 기능 코드를 부여하고 각 기능별 이슈가 발생했을 때 커밋 로그에 기능 코드를 넣는다면 조금 더 형상 관리면에서도 효율적일 것이라고 판단된다. 기능 명세서1. CRAWL 기능 코드 기능 설명 관련 요구사항 CRAWL-0001 네이버 금융에서 코스피, 코스닥별 기업 목록을 crawling 기업 정보 crawling CRAWL-0002 매일밤 00시에 주식시장의 종목별 종가 crawling batch 기업 정보 crawling CRAWL-0003 DART에서 신규 보고서(재무제표) crawling batch 재무제표 crawling CRAWL-0004 DART에서 종목별 재무제표 crawling 재무제표 crawling CRAWL-0005 네이버 금융에서 거래중지 여부 crawling 기업 정보 crawling CRAWL-0006 네이버 금융에서 코스피, 코스닥 현재가 crawling 기업 정보 crawling 2. STOCK 기능 코드 기능 설명 관련 요구사항 STOCK-0001 기업 정보와 재무제표 정보를 join해서 추천 순위로 정렬해서 보여주기 재무제표 view기업 정보 view추천종목 추출 STOCK-0002 사용자가 필요로 하는 지표의 수식을 입력받아 계산해서 보여줌 custom 지표 적용 STOCK-0003 추천종목을 추리기 위한 filter를 편집할 수 있는 기능 custom 지표 적용 3. SNAPSHOT 기능 코드 기능 설명 관련 요구사항 SNAP-0001 관심있는 종목들을 snapshot을 찍어 저장 snapshot SNAP-0002 내가 찍은 snapshot 목록 조회 snapshot SNAP-0003 내가 찍은 특정 snapshot의 목록과 월별 수익률 view snapshot SNAP-0004 수익률 순서대로 snapshot 정렬 snapshot 4. EXPORT 기능 코드 기능 설명 관련 요구사항 EXPORT-0001 Stock view의 내용을 excel로 export excel export EXPORT-0002 My Snapshot의 내용을 excel로 export excel export 5. MEMBER 기능 코드 기능 설명 관련 요구사항 MEMBER-0001 회원가입 회원 (new) MEMBER-0002 회원정보 수정 회원 (new) MEMBER-0003 회원 탈퇴 회원 (new) MEMBER-0004 비밀번호 찾기 회원 (new) MEMBER-0005 개인정보 처리 방침 회원 (new) MEMBER-0006 약관 회원 (new) 6. ADMIN 기능 코드 기능 설명 관련 요구사항 ADMIN-0001 회원 권한 관리 Admin (new) ADMIN-0002 공지사항 관리 Admin (new) ADMIN-0003 Release Note 관리 Admin (new) ADMIN-0004 권한 관리 - 사용자에게 부여할 권한의 종류를 관리한다. Admin (new) 7. Q&amp;A 기능 코드 기능 설명 관련 요구사항 QNA-0001 Q&amp;A 관리 Q&amp;A (new) QNA-0002 Q&amp;A 관리 to Admin Q&amp;A (new) 8. MESSAGE 기능 코드 기능 설명 관련 요구사항 MSG-0001 쪽지 발송 회원 (new) MSG-0002 쪽지 수신 회원 (new) MSG-0003 쪽지 삭제 회원 (new) MSG-0004 쪽지 저장 회원 (new) MSG-0005 쪽지 검색 회원 (new) 9. BOARD 기능 코드 기능 설명 관련 요구사항 BOARD-0001 자유게시판 작성 Board (new) BOARD-0002 자유게시판 수정 Board (new) BOARD-0003 자유게시판 조회 Board (new) BOARD-0004 자유게시판 삭제 Board (new) Next…기능 명세를 어느 정도 만들어 놓았으니 단어 사전을 만들고, 단어 사전으로 entity들을 정의하고, entity간의 관계를 설정한 후에, 정규화를 거쳐서 modeling을 진행할 차례다. 현재까지의 진행 상황 Task Desc Plan Start Plan End Actual Start Actual End Remark 화면 설계 요구사항을 수행할 수 있는 화면 설계 11/15 11/15 11/18 11/18 https://ovenapp.io/ 기능 명세서 요구사항을 명확하게 정의한 문서 11/19 11/19 11/19 11/19 11/18 추가 DB 설계 요구사항의 내용으로 Data Modeling 11/20 11/20 http://aquerytool.com/ 환경설정 구현하기 위한 기본 환경 설정 11/21 11/25 환경 설정 문서를 slideshare로 남길 것 구현 화면을 실제 사용할 수 있도록 구현 11/26 12/6 항목별로 일정 다시 설계","link":"/2019/11/19/about-Stock-%EA%B8%B0%EB%8A%A5-%EB%AA%85%EC%84%B8%EC%84%9C/"},{"title":"about Stock - 화면 설계","text":"작업에 들어가기 전… 화면 설계를 하기 위해서 kakao에서 개발된 oven api( https://ovenapp.io/ )를 사용하였다. 이전에는 balsamic mockup을 이용했었는데 아무래도 나온지 좀 오래되고 해서 그나마 최근 만들어졌고 무료이니까 한번 써보았다. 원래는 모든 화면에 대해서 작업하려고 했는데 은근 이것도 공수를 잡아먹어서 러프하게 중요한 화면 위주로 작업하고 세세하게는 그때 그때 손으로 그려서 차라리 사진을 찍는게 나을 것 같다는 생각을 하게 되더라… 결과물1. Home 일단 전체적인 분위기는 Simple &amp; Luxury를 추구하고자 black &amp; white로 틀을 잡았다. About Stock이라는 font 역시 좀더 고급스러운 font로 따던가 아니면 photo shop으로 조금 손을 보는 것이 나을 것 같다. 현재 만드려는 서비스에 대한 포부? 를 적어보았다. Site Map에서는 나중에 나의 서비스들이 화장되게 되면 저 화면에서 link가 늘어나겠지? 2. Stock 메인이 될 화면이다. 이곳에서 추천 종목들을 볼 수 있고 필요에 따라서는 Snapshot도 찍을 수 있다. Snapshot을 찍은 종목들은 향후 6개월간 trace를 할 수 있도록 My Snapshot 화면에서 보여줄 계획이다. Crawling 버튼들은 사용자들이 임의로 눌렀다가는 엄청난 resource 낭비가 될 수 있으므로 운영자에게만 오픈할 예정. 3. Admin 운영을 그래도 한 3년 가까이 하다보니 느낀 것은 운영 업무에 상당수는 굉장히 반복적인 업무들이 많다는 점이다. 그런데 그것들을 따로 패턴화시켜놓지 않을 경우 손이 엄청 많이 가서 실제 운영이 처리해야 할 다른 일들을 못하는 경우가 생기더라. 사실 회원 관리도 그냥 DB에서 Update문을 날리면 된다. 하지만 실수를 할 수도 있고 굳이 그렇게 할 필요 없이 운영자용 화면을 개발해 놓으면 DB 지식이 없는 사람도 손쉽게 운영자의 일을 할 수 있어 시간을 아낄 수 있을 것이다. Next…일단 화면 설계까지는 대충 했다. 다음 단계는 정확히 개발해야 할 기능에 대한 명세서를 작성할 것이다. 이 명세서는 나중에 테스트 케이스를 만드는데 사용이 될 것이다. 현재 목표는 구현하고자 하는 모든 기능에 대하여 100% 테스트 케이스를 등록할 예정이다. 현재까지의 진행 상황 Task Desc Plan Start Plan End Actual Start Actual End Remark 화면 설계 요구사항을 수행할 수 있는 화면 설계 11/15 11/15 11/18 11/18 https://ovenapp.io/ 기능 명세서 요구사항을 명확하게 정의한 문서 11/19 11/19 11/18 추가 DB 설계 요구사항의 내용으로 Data Modeling 11/20 11/20 http://aquerytool.com/ 환경설정 구현하기 위한 기본 환경 설정 11/21 11/25 환경 설정 문서를 slideshare로 남길 것 구현 화면을 실제 사용할 수 있도록 구현 11/26 12/6 항목별로 일정 다시 설계","link":"/2019/11/19/about-Stock-%ED%99%94%EB%A9%B4-%EC%84%A4%EA%B3%84/"}],"tags":[{"name":"계획","slug":"계획","link":"/tags/%EA%B3%84%ED%9A%8D/"},{"name":"excel","slug":"excel","link":"/tags/excel/"},{"name":"export","slug":"export","link":"/tags/export/"},{"name":"ORA-22835","slug":"ORA-22835","link":"/tags/ORA-22835/"},{"name":"기능 명세서","slug":"기능-명세서","link":"/tags/%EA%B8%B0%EB%8A%A5-%EB%AA%85%EC%84%B8%EC%84%9C/"},{"name":"화면 설계","slug":"화면-설계","link":"/tags/%ED%99%94%EB%A9%B4-%EC%84%A4%EA%B3%84/"}],"categories":[{"name":"project","slug":"project","link":"/categories/project/"},{"name":"Trouble Shooting","slug":"Trouble-Shooting","link":"/categories/Trouble-Shooting/"},{"name":"about Stock","slug":"project/about-Stock","link":"/categories/project/about-Stock/"},{"name":"java","slug":"Trouble-Shooting/java","link":"/categories/Trouble-Shooting/java/"},{"name":"DB","slug":"Trouble-Shooting/DB","link":"/categories/Trouble-Shooting/DB/"}]}