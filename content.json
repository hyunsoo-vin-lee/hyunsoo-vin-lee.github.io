{"pages":[],"posts":[{"title":"about Stock 프로젝트 계획","text":"목표주식 추천 종목 추출 동기월급을 모아서는 서울에 집 한 채도 가지기 힘든 요즘. YOLO 스타일을 추구하는 우리 부부에게 노후 대책은 이제 주식 뿐이야! 올바른 주식 투자를 위해서는 퀀트투자가 답! 퀀트투자를 하기 위해서 재무제표 기반으로 건설적인 투자 계획을 세우자! 세부 목표재무제표 정보를 기반으로 하여 원하는 지표에 맞는 종목을 추천해줄 것 요구 사항 항목 우선순위 Remark 재무제표 crawling 1 재무제표 view 3 기업정보 crawling 2 기업정보 view 4 custom 지표 적용 9 추천종목 추출 5 excel export 8 snapshot 6 snapshot 대상에 대한 매월 auto snapshot 7 DART의 재무제표 export file에 대한 parsing 기능 10 필요 기술 언어 : python web framework : Django DB : maria DB, MySQL 화면 : Vue.js crawling을 위한 scheduler : apscheduler grid : toast-UI 일정 수립 Task Desc PlanStart PlanEnd ActualStart ActualEnd Remark 화면 설계 요구사항을 수행할 수 있는 화면 설계 11/15 11/15 https://ovenapp.io/ DB 설계 요구사항의 내용으로 Data Modeling 11/18 11/18 http://aquerytool.com/ 환경설정 구현하기 위한 기본 환경 설정 11/19 11/21 환경 설정 문서를 slideshare로 남길 것 구현 화면을 실제 사용할 수 있도록 구현 11/25 12/6 항목별로 일정 다시 설계","link":"/2019/11/15/about-Stock-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B3%84%ED%9A%8D/"},{"title":"Excel Export","text":"문제/현상excel로 export를 할 때 로컬이나 QA 환경에서는 정상적으로 excel 다운로드가 이루어지나, 운영 환경에서는 Canonical Path를 사용하라는 메세지를 남기면서 에러가 뜬다. 원인처음에는 excel 파일을 만들기 위해서, workbook을 생성하고 worksheet에 내용을 다 쓰게 되면 이를 FileOutputStream을 이용해서 실제 file에 쓰게 되고 이를 서버내의 임의의 경로에 떨군 다음 사용자에게 밀어주는 형태로 구성했다. 그러나 문제가 되는 부분은 실제 file을 new File(filePath); 한 부분인데 이 때 filePath를 설정 파일 내에서 가져와서 그 뒤에 file명만 붙여서 절대 path처럼 사용한 것임에도 불구하고 Canonical Path를 쓰지 않아서 error가 난다고 하니 통 이해할 수 없었다. 관련하여 구글링을 해보니, Absolute Path와 Canonical Path의 차이점( https://www.benjaminlog.com/entry/absolute-path-vs-canonical-path ) 이라는 게시물이 있었다. 간단히 요약하자면 Abolute Path는 path의 expression안에 ../ 이나 ./ 같은 문자열도 사용이 가능하고 Canonical Path는 그런 표현을 허락하지 않는다는 것이다. 예를 들어, Path : /users/hslee 라는 주소가 있다면, Absolute Path : /users/../users/hslee도 가능하고, /users/./././hslee 도 가능하다. Canonical Path : /users/hslee 단 하나만 가능하다. 그러나 실제로 나온 path는 ../이나 ./이 없는 상태였기에 위의 방법으로는 해결하지 못했다. 조치file의 path부분에서 계속 에러가 발생하니 file을 생성하고 사용자에게 push하지 않고 애초에 output Stream을 사용해서 excel을 작성하니 HttpOutputServletResponse로 그대로 밀어버리면 될 듯했다. 마침 기존 grid 화면에서 grid api를 사용하여 excel export를 그런 식으로 구현하고 있어 조금 차용하였다. 12345678910111213141516// beforeHSSFWorkbook wb = new HSSFWorkbook();...String filePath = System.getProperty() + java.io.FileSeparator + \"data.xls\";FileOutputStream fos = new File(filePath);wb.write(fos);// afterHSSFWorkbook wb = new HSSFWorkbook();...ServletOutputStream sos = response.getOutputStream();wb.write(sos); 결과다행히도 문제 없이 정상적으로 다운로드를 할 수 있었다. 기존 enovia 환경이었다면 request, response 대신 context만 넘어오길 때문에 이와 같은 방법을 쓰기에는(java 단에서) 어려웠을 것이다. 장점 file path를 구하는 것보다 소스 구현이 편하다. file로 생성하면 나중에 삭제 로직도 구현해야 하지만 stream을 사용하면 그럴 필요가 없다. 단점 response가 필요하므로 controller단부터 response를 계속 parameter로 넘겨줘야 한다. 연계해서 공부할 것 file을 사용자에게 제공하는 방법에 무엇이 더 있는지 알아보자.","link":"/2019/11/18/Excel-Export/"}],"tags":[{"name":"계획","slug":"계획","link":"/tags/%EA%B3%84%ED%9A%8D/"},{"name":"excel","slug":"excel","link":"/tags/excel/"},{"name":"export","slug":"export","link":"/tags/export/"}],"categories":[{"name":"project","slug":"project","link":"/categories/project/"},{"name":"Trouble Shooting","slug":"Trouble-Shooting","link":"/categories/Trouble-Shooting/"},{"name":"about Stock","slug":"project/about-Stock","link":"/categories/project/about-Stock/"},{"name":"java","slug":"Trouble-Shooting/java","link":"/categories/Trouble-Shooting/java/"}]}